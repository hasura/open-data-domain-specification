{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "MetadataObject",
  "anyOf": [
    {
      "$ref": "#/definitions/HasuraMetadataObject"
    },
    {
      "$ref": "#/definitions/OpenDdsObject"
    }
  ],
  "definitions": {
    "HasuraMetadataObject": {
      "oneOf": [
        {
          "title": "CompatibilityConfig",
          "type": "object",
          "required": [
            "date",
            "kind"
          ],
          "properties": {
            "kind": {
              "type": "string",
              "enum": [
                "CompatibilityConfig"
              ]
            },
            "date": {
              "$ref": "#/definitions/CompatibilityDate"
            }
          }
        },
        {
          "title": "HasuraHubDataConnector",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "HasuraHubDataConnector"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/HasuraHubDataConnectorV1"
                }
              }
            }
          ]
        },
        {
          "title": "AuthConfig",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "AuthConfig"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/AuthConfigV1"
                }
              }
            }
          ]
        }
      ]
    },
    "CompatibilityDate": {
      "type": "string",
      "format": "date"
    },
    "HasuraHubDataConnectorV1": {
      "title": "HasuraHubDataConnectorV1",
      "type": "object",
      "required": [
        "connectorConfiguration",
        "connectorId",
        "name"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/DataConnectorName"
        },
        "connectorId": {
          "type": "string"
        },
        "connectorConfiguration": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/HubDataConnectorRegionConfig"
          }
        }
      }
    },
    "DataConnectorName": {
      "description": "The name of a data connector.",
      "type": "string"
    },
    "HubDataConnectorRegionConfig": {
      "type": "object",
      "required": [
        "configuration",
        "mode",
        "region"
      ],
      "properties": {
        "region": {
          "type": "string"
        },
        "mode": {
          "$ref": "#/definitions/ConnectorMode"
        },
        "configuration": {
          "$ref": "https://postgres-configserv.ddn.hasura.app/schema"
        }
      }
    },
    "ConnectorMode": {
      "type": "string",
      "enum": [
        "ReadOnly",
        "ReadWrite",
        "WriteOnly"
      ]
    },
    "AuthConfigV1": {
      "title": "AuthConfigV1",
      "type": "object",
      "required": [
        "mode"
      ],
      "properties": {
        "allowRoleEmulationBy": {
          "anyOf": [
            {
              "$ref": "#/definitions/Role"
            },
            {
              "type": "null"
            }
          ]
        },
        "mode": {
          "$ref": "#/definitions/AuthModeConfig"
        }
      }
    },
    "Role": {
      "type": "string"
    },
    "AuthModeConfig": {
      "title": "AuthModeConfig",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "webhook"
          ],
          "properties": {
            "webhook": {
              "$ref": "#/definitions/AuthHookConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "jwt"
          ],
          "properties": {
            "jwt": {
              "$ref": "#/definitions/JWTConfig"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "AuthHookConfig": {
      "title": "AuthHookConfig",
      "description": "The config of the Authentication hook",
      "type": "object",
      "required": [
        "method",
        "url"
      ],
      "properties": {
        "url": {
          "type": "string",
          "format": "uri"
        },
        "method": {
          "$ref": "#/definitions/AuthHookMethod"
        }
      }
    },
    "AuthHookMethod": {
      "title": "AuthHookMethod",
      "type": "string",
      "enum": [
        "Get",
        "Post"
      ]
    },
    "JWTConfig": {
      "type": "object",
      "required": [
        "claimsConfig",
        "key",
        "tokenLocation"
      ],
      "properties": {
        "audience": {
          "description": "Optional validation to check that the `aud` field is a member of the `audience` recieved, otherwise will throw error.",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "type": "string"
          },
          "uniqueItems": true
        },
        "issuer": {
          "description": "Optional validation to check that the `iss` field is a member of the `iss` received, otherwise will throw error.",
          "type": [
            "string",
            "null"
          ]
        },
        "allowedSkew": {
          "description": "Allowed leeway (in seconds) to the `exp` validation to account for clock skew.",
          "type": [
            "integer",
            "null"
          ],
          "format": "uint64",
          "minimum": 0.0
        },
        "claimsConfig": {
          "description": "Claims config. Either specified via `claims_mappings` or `claims_namespace_path`",
          "allOf": [
            {
              "$ref": "#/definitions/JWTClaimsConfig"
            }
          ]
        },
        "tokenLocation": {
          "description": "Source of the JWT authentication token.",
          "allOf": [
            {
              "$ref": "#/definitions/JWTTokenLocation"
            }
          ]
        },
        "key": {
          "description": "Mode according to which the JWT auth is configured.",
          "allOf": [
            {
              "$ref": "#/definitions/JWTKey"
            }
          ]
        }
      }
    },
    "JWTClaimsConfig": {
      "title": "JWTClaimsConfig",
      "description": "Config to describe how/where the engine should look for the claims within the decoded token.",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "locations"
          ],
          "properties": {
            "locations": {
              "$ref": "#/definitions/ClaimsMap"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "namespace"
          ],
          "properties": {
            "namespace": {
              "type": "object",
              "required": [
                "claimsFormat",
                "location"
              ],
              "properties": {
                "claimsFormat": {
                  "description": "Format in which the Hasura claims will be present.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/JWTClaimsFormat"
                    }
                  ]
                },
                "location": {
                  "description": "Pointer to lookup the Hasura claims within the decoded claims.",
                  "type": "string",
                  "format": "JSON pointer"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ClaimsMap": {
      "title": "ClaimsMap",
      "type": "object",
      "required": [
        "x-hasura-allowed-roles",
        "x-hasura-default-role"
      ],
      "properties": {
        "x-hasura-default-role": {
          "$ref": "#/definitions/ClaimsMappingEntry_for_Role"
        },
        "x-hasura-allowed-roles": {
          "$ref": "#/definitions/ClaimsMappingEntry_for_Array_of_Role"
        }
      }
    },
    "ClaimsMappingEntry_for_Role": {
      "title": "ClaimsMappingEntry",
      "oneOf": [
        {
          "description": "Literal value of the claims mapping",
          "type": "object",
          "required": [
            "literal"
          ],
          "properties": {
            "literal": {
              "$ref": "#/definitions/Role"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Look up the Hasura claims at the specified JSON Pointer and provide a default value if the lookup fails.",
          "type": "object",
          "required": [
            "path"
          ],
          "properties": {
            "path": {
              "type": "object",
              "required": [
                "path"
              ],
              "properties": {
                "path": {
                  "description": "JSON pointer to find the particular claim in the decoded JWT token.",
                  "type": "string",
                  "format": "JSON pointer"
                },
                "default": {
                  "description": "Default value to be used when no value is found when looking up the value using the `path`.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/Role"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ClaimsMappingEntry_for_Array_of_Role": {
      "title": "ClaimsMappingEntry",
      "oneOf": [
        {
          "description": "Literal value of the claims mapping",
          "type": "object",
          "required": [
            "literal"
          ],
          "properties": {
            "literal": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Role"
              }
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Look up the Hasura claims at the specified JSON Pointer and provide a default value if the lookup fails.",
          "type": "object",
          "required": [
            "path"
          ],
          "properties": {
            "path": {
              "type": "object",
              "required": [
                "path"
              ],
              "properties": {
                "path": {
                  "description": "JSON pointer to find the particular claim in the decoded JWT token.",
                  "type": "string",
                  "format": "JSON pointer"
                },
                "default": {
                  "description": "Default value to be used when no value is found when looking up the value using the `path`.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/definitions/Role"
                  }
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ClaimsMappingEntry_for_SessionVariableValue": {
      "title": "ClaimsMappingEntry",
      "oneOf": [
        {
          "description": "Literal value of the claims mapping",
          "type": "object",
          "required": [
            "literal"
          ],
          "properties": {
            "literal": {
              "$ref": "#/definitions/SessionVariableValue"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "Look up the Hasura claims at the specified JSON Pointer and provide a default value if the lookup fails.",
          "type": "object",
          "required": [
            "path"
          ],
          "properties": {
            "path": {
              "type": "object",
              "required": [
                "path"
              ],
              "properties": {
                "path": {
                  "description": "JSON pointer to find the particular claim in the decoded JWT token.",
                  "type": "string",
                  "format": "JSON pointer"
                },
                "default": {
                  "description": "Default value to be used when no value is found when looking up the value using the `path`.",
                  "anyOf": [
                    {
                      "$ref": "#/definitions/SessionVariableValue"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "SessionVariableValue": {
      "type": "string"
    },
    "JWTClaimsFormat": {
      "title": "JWTClaimsFormat",
      "oneOf": [
        {
          "description": "Claims will be in the JSON format.",
          "type": "string",
          "enum": [
            "Json"
          ]
        },
        {
          "description": "Claims will be in the Stringified JSON format.",
          "type": "string",
          "enum": [
            "StringifiedJson"
          ]
        }
      ]
    },
    "JWTTokenLocation": {
      "title": "JWTTokenLocation",
      "description": "Source of the Authorization token",
      "oneOf": [
        {
          "description": "Get the bearer token from the `Authorization` header.",
          "type": "object",
          "required": [
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "BearerAuthorization"
              ]
            }
          }
        },
        {
          "description": "Get the token from the Cookie header under the specificied cookie name.",
          "type": "object",
          "required": [
            "name",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Cookie"
              ]
            },
            "name": {
              "type": "string"
            }
          }
        },
        {
          "description": "Custom header from where the header should be parsed from.",
          "type": "object",
          "required": [
            "name",
            "type"
          ],
          "properties": {
            "type": {
              "type": "string",
              "enum": [
                "Header"
              ]
            },
            "name": {
              "type": "string"
            }
          }
        }
      ]
    },
    "JWTKey": {
      "title": "JWTKey",
      "oneOf": [
        {
          "description": "JWT mode when the algorithm `type` and `key` is known",
          "type": "object",
          "required": [
            "fixed"
          ],
          "properties": {
            "fixed": {
              "$ref": "#/definitions/JWTKeyConfig"
            }
          },
          "additionalProperties": false
        },
        {
          "description": "JWT mode where the `type` and `key` parameters are obtained dynamically through JWK.",
          "type": "object",
          "required": [
            "jwkFromUrl"
          ],
          "properties": {
            "jwkFromUrl": {
              "type": "string",
              "format": "uri"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "JWTKeyConfig": {
      "title": "JWTKeyConfig",
      "description": "JWT Secret config according to which the incoming JWT will be decoded.",
      "type": "object",
      "required": [
        "algorithm",
        "key"
      ],
      "properties": {
        "algorithm": {
          "$ref": "#/definitions/Algorithm"
        },
        "key": {
          "$ref": "#/definitions/SecretableString"
        }
      }
    },
    "Algorithm": {
      "title": "JWTAlgorithm",
      "oneOf": [
        {
          "description": "HMAC using SHA-256",
          "type": "string",
          "enum": [
            "HS256"
          ]
        },
        {
          "description": "HMAC using SHA-384",
          "type": "string",
          "enum": [
            "HS384"
          ]
        },
        {
          "description": "HMAC using SHA-512",
          "type": "string",
          "enum": [
            "HS512"
          ]
        },
        {
          "description": "ECDSA using SHA-256",
          "type": "string",
          "enum": [
            "ES256"
          ]
        },
        {
          "description": "ECDSA using SHA-384",
          "type": "string",
          "enum": [
            "ES384"
          ]
        },
        {
          "description": "RSASSA-PKCS1-v1_5 using SHA-256",
          "type": "string",
          "enum": [
            "RS256"
          ]
        },
        {
          "description": "RSASSA-PKCS1-v1_5 using SHA-384",
          "type": "string",
          "enum": [
            "RS384"
          ]
        },
        {
          "description": "RSASSA-PKCS1-v1_5 using SHA-512",
          "type": "string",
          "enum": [
            "RS512"
          ]
        },
        {
          "description": "RSASSA-PSS using SHA-256",
          "type": "string",
          "enum": [
            "PS256"
          ]
        },
        {
          "description": "RSASSA-PSS using SHA-384",
          "type": "string",
          "enum": [
            "PS384"
          ]
        },
        {
          "description": "RSASSA-PSS using SHA-512",
          "type": "string",
          "enum": [
            "PS512"
          ]
        },
        {
          "description": "Edwards-curve Digital Signature Algorithm (EdDSA)",
          "type": "string",
          "enum": [
            "EdDSA"
          ]
        }
      ]
    },
    "SecretableString": {
      "$ref": "https://raw.githubusercontent.com/hasura/ndc-spec/main/ndc-client/tests/json_schema/secretable_value.jsonschema"
    },
    "OpenDdsObject": {
      "oneOf": [
        {
          "title": "DataConnector",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "DataConnector"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/DataConnectorV1"
                }
              }
            }
          ]
        },
        {
          "title": "ObjectType",
          "description": "Definition of a user-defined Open DD object type.",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "ObjectType"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/ObjectTypeV1"
                }
              }
            }
          ]
        },
        {
          "title": "ScalarType",
          "description": "Definition of a user-defined scalar type that that has opaque semantics.",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "ScalarType"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/ScalarTypeV1"
                }
              }
            }
          ]
        },
        {
          "title": "DataConnectorScalarRepresentation",
          "description": "The representation of a data connector scalar in terms of Open DD types",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "DataConnectorScalarRepresentation"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/DataConnectorScalarRepresentationV1"
                }
              }
            }
          ]
        },
        {
          "title": "Model",
          "description": "The definition of a data model. A data model is a collection of objects of a particular type. Models can support one or more CRUD operations.",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "Model"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/ModelV1"
                }
              }
            }
          ]
        },
        {
          "title": "Command",
          "description": "The definition of a command. A command is a user-defined operation which can take arguments and returns an output. The semantics of a command are opaque to the Open DD specification.",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "Command"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/CommandV1"
                }
              }
            }
          ]
        },
        {
          "title": "Relationship",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "Relationship"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/RelationshipV1"
                }
              }
            }
          ]
        },
        {
          "title": "TypePermissions",
          "description": "List of roles and their permissions for a type",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "TypePermissions"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/TypePermissionsV1"
                }
              }
            }
          ]
        },
        {
          "title": "ModelPermissions",
          "description": "Roles and their permissions for a model",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "ModelPermissions"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/ModelPermissionsV1"
                }
              }
            }
          ]
        },
        {
          "title": "CommandPermissions",
          "description": "Role-Permission map for a command",
          "oneOf": [
            {
              "type": "object",
              "required": [
                "definition",
                "kind",
                "version"
              ],
              "properties": {
                "kind": {
                  "type": "string",
                  "enum": [
                    "CommandPermissions"
                  ]
                },
                "version": {
                  "type": "string",
                  "enum": [
                    "v1"
                  ]
                },
                "definition": {
                  "$ref": "#/definitions/CommandPermissionsV1"
                }
              }
            }
          ]
        }
      ]
    },
    "DataConnectorV1": {
      "title": "DataConnectorV1",
      "type": "object",
      "required": [
        "name",
        "url"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/DataConnectorName"
        },
        "url": {
          "$ref": "#/definitions/DataConnectorUrl"
        },
        "headers": {
          "description": "Key value map of HTTP headers to be sent with each request to the data connector",
          "default": {},
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/SecretableString"
          }
        },
        "schema": {
          "default": {
            "scalar_types": {},
            "object_types": {},
            "collections": [],
            "functions": [],
            "procedures": []
          },
          "allOf": [
            {
              "$ref": "https://raw.githubusercontent.com/hasura/ndc-spec/v0.1.0-rc.7/ndc-client/tests/json_schema/schema_response.jsonschema"
            }
          ]
        }
      }
    },
    "DataConnectorUrl": {
      "title": "DataConnectorUrl",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "singleUrl"
          ],
          "properties": {
            "singleUrl": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "title": "ReadWriteUrls",
          "type": "object",
          "required": [
            "readWriteUrls"
          ],
          "properties": {
            "readWriteUrls": {
              "type": "object",
              "required": [
                "read",
                "write"
              ],
              "properties": {
                "read": {
                  "type": "string"
                },
                "write": {
                  "type": "string"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ObjectTypeV1": {
      "title": "ObjectTypeV1",
      "type": "object",
      "required": [
        "fields",
        "name"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/CustomTypeName"
        },
        "fields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldDefinition"
          }
        },
        "globalIdFields": {
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/FieldName"
          }
        },
        "graphql": {
          "description": "GraphQl configuration for this object.",
          "anyOf": [
            {
              "$ref": "#/definitions/ObjectTypeGraphQLConfiguration"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "CustomTypeName": {
      "description": "The name of a user-defined type.",
      "type": "string"
    },
    "FieldDefinition": {
      "title": "ObjectFieldDefinition",
      "description": "The definition of a field in a user-defined object type.",
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/FieldName"
        },
        "type": {
          "$ref": "#/definitions/TypeReference"
        }
      }
    },
    "FieldName": {
      "description": "The name of a field in a user-defined object type.",
      "type": "string"
    },
    "TypeReference": {
      "description": "A reference to an Open DD type including nullable values and arrays.\nSuffix '!' to indicate a non-nullable reference, and wrap in '[]' to indicate an array.\nEg: '[String!]!' is a non-nullable array of non-nullable strings.",
      "type": "string"
    },
    "ObjectTypeGraphQLConfiguration": {
      "title": "ObjectTypeGraphQLConfiguration",
      "description": "GraphQL configuration of an Open DD object type.",
      "type": "object",
      "properties": {
        "typeName": {
          "description": "The name of the GraphQl type to use for this object.",
          "anyOf": [
            {
              "$ref": "#/definitions/GraphQlTypeName"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "GraphQlTypeName": {
      "type": "string"
    },
    "ScalarTypeV1": {
      "title": "ScalarTypeV1",
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "name": {
          "description": "The OpenDD name of this type.",
          "allOf": [
            {
              "$ref": "#/definitions/CustomTypeName"
            }
          ]
        },
        "graphql": {
          "description": "The name of the GraphQl scalar type to use for",
          "anyOf": [
            {
              "$ref": "#/definitions/ScalarTypeGraphQLConfiguration"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "ScalarTypeGraphQLConfiguration": {
      "title": "ScalarTypeGraphQLConfiguration",
      "description": "GraphQL configuration of an Open DD scalar type",
      "type": "object",
      "required": [
        "typeName"
      ],
      "properties": {
        "typeName": {
          "description": "The name of the GraphQl type to use for this scalar.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlTypeName"
            }
          ]
        }
      }
    },
    "DataConnectorScalarRepresentationV1": {
      "title": "DataConnectorScalarRepresentationV1",
      "type": "object",
      "required": [
        "dataConnectorName",
        "dataConnectorScalarType",
        "representation"
      ],
      "properties": {
        "dataConnectorName": {
          "$ref": "#/definitions/DataConnectorName"
        },
        "dataConnectorScalarType": {
          "type": "string"
        },
        "representation": {
          "$ref": "#/definitions/TypeName"
        },
        "graphql": {
          "anyOf": [
            {
              "$ref": "#/definitions/DataConnectorScalarGraphQLConfiguration"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "TypeName": {
      "anyOf": [
        {
          "$ref": "#/definitions/InbuiltType"
        },
        {
          "$ref": "#/definitions/CustomTypeName"
        }
      ]
    },
    "InbuiltType": {
      "type": "string",
      "enum": [
        "ID",
        "Int",
        "Float",
        "Boolean",
        "String"
      ]
    },
    "DataConnectorScalarGraphQLConfiguration": {
      "title": "DataConnectorScalarGraphQLConfiguration",
      "description": "GraphQL configuration of a data connector scalar",
      "type": "object",
      "properties": {
        "comparisonExpressionTypeName": {
          "anyOf": [
            {
              "$ref": "#/definitions/GraphQlTypeName"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "ModelV1": {
      "title": "ModelV1",
      "type": "object",
      "required": [
        "filterableFields",
        "name",
        "objectType",
        "orderableFields"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/ModelName"
        },
        "objectType": {
          "description": "The type of the objects of which this model is a collection.",
          "allOf": [
            {
              "$ref": "#/definitions/CustomTypeName"
            }
          ]
        },
        "globalIdSource": {
          "default": false,
          "type": "boolean"
        },
        "arguments": {
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArgumentDefinition"
          }
        },
        "source": {
          "anyOf": [
            {
              "$ref": "#/definitions/ModelSource"
            },
            {
              "type": "null"
            }
          ]
        },
        "filterableFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/FilterableField"
          }
        },
        "orderableFields": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/OrderableField"
          }
        },
        "graphql": {
          "anyOf": [
            {
              "$ref": "#/definitions/ModelGraphQlDefinition"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "ModelName": {
      "description": "The name of data model.",
      "type": "string"
    },
    "ArgumentDefinition": {
      "title": "ArgumentDefinition",
      "description": "The definition of an argument for a field, command, or model.",
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/ArgumentName"
        },
        "type": {
          "$ref": "#/definitions/TypeReference"
        }
      }
    },
    "ArgumentName": {
      "type": "string"
    },
    "ModelSource": {
      "title": "ModelSource",
      "description": "Description of how a model maps to a particular data connector",
      "type": "object",
      "required": [
        "collection",
        "dataConnectorName"
      ],
      "properties": {
        "dataConnectorName": {
          "description": "The name of the data connector backing this model.",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorName"
            }
          ]
        },
        "collection": {
          "description": "The collection in the data connector that backs this model.",
          "type": "string"
        },
        "typeMapping": {
          "description": "How the various types used in this model correspond to entities in the data connector.",
          "default": {},
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/TypeMapping"
          }
        },
        "argumentMapping": {
          "default": {},
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "TypeMapping": {
      "title": "TypeMapping",
      "type": "object",
      "required": [
        "fieldMapping"
      ],
      "properties": {
        "fieldMapping": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/FieldMapping"
          }
        }
      }
    },
    "FieldMapping": {
      "title": "ObjectFieldMapping",
      "type": "object",
      "required": [
        "column"
      ],
      "properties": {
        "column": {
          "type": "string"
        }
      }
    },
    "FilterableField": {
      "title": "FilterableField",
      "type": "object",
      "required": [
        "fieldName",
        "operators"
      ],
      "properties": {
        "fieldName": {
          "$ref": "#/definitions/FieldName"
        },
        "operators": {
          "$ref": "#/definitions/EnableAllOrSpecific_for_OperatorName"
        }
      }
    },
    "EnableAllOrSpecific_for_OperatorName": {
      "title": "EnableAllOrSpecific",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "enableAll"
          ],
          "properties": {
            "enableAll": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "enableSpecific"
          ],
          "properties": {
            "enableSpecific": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OperatorName"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "OperatorName": {
      "type": "string"
    },
    "OrderableField": {
      "title": "OrderableField",
      "type": "object",
      "required": [
        "fieldName",
        "orderByDirections"
      ],
      "properties": {
        "fieldName": {
          "$ref": "#/definitions/FieldName"
        },
        "orderByDirections": {
          "$ref": "#/definitions/EnableAllOrSpecific_for_OrderByDirection"
        }
      }
    },
    "EnableAllOrSpecific_for_OrderByDirection": {
      "title": "EnableAllOrSpecific",
      "oneOf": [
        {
          "type": "object",
          "required": [
            "enableAll"
          ],
          "properties": {
            "enableAll": {
              "type": "boolean"
            }
          },
          "additionalProperties": false
        },
        {
          "type": "object",
          "required": [
            "enableSpecific"
          ],
          "properties": {
            "enableSpecific": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/OrderByDirection"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "OrderByDirection": {
      "title": "OrderByDirection",
      "type": "string",
      "enum": [
        "Asc",
        "Desc"
      ]
    },
    "ModelGraphQlDefinition": {
      "title": "ModelGraphQlDefinition",
      "description": "The definition of the GraphQL API component specific to a model.",
      "type": "object",
      "required": [
        "selectUniques"
      ],
      "properties": {
        "selectUniques": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/SelectUniqueGraphQlDefinition"
          }
        },
        "selectMany": {
          "anyOf": [
            {
              "$ref": "#/definitions/SelectManyGraphQlDefinition"
            },
            {
              "type": "null"
            }
          ]
        },
        "argumentsInputType": {
          "anyOf": [
            {
              "$ref": "#/definitions/GraphQlTypeName"
            },
            {
              "type": "null"
            }
          ]
        },
        "filterExpressionType": {
          "description": "The type name of the filter boolean expression.",
          "anyOf": [
            {
              "$ref": "#/definitions/GraphQlTypeName"
            },
            {
              "type": "null"
            }
          ]
        },
        "orderByExpressionType": {
          "anyOf": [
            {
              "$ref": "#/definitions/GraphQlTypeName"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "SelectUniqueGraphQlDefinition": {
      "title": "SelectUniqueGraphQlDefinition",
      "description": "The definition of the GraphQL API for selecting a unique row/object from a model.",
      "type": "object",
      "required": [
        "queryRootField",
        "uniqueIdentifier"
      ],
      "properties": {
        "queryRootField": {
          "description": "The name of the query root field for this API.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        },
        "uniqueIdentifier": {
          "description": "A set of fields which can uniquely identify a row/object in the model.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldName"
          }
        }
      }
    },
    "GraphQlFieldName": {
      "description": "The name of a GraphQL object field.",
      "type": "string"
    },
    "SelectManyGraphQlDefinition": {
      "title": "SelectManyGraphQlDefinition",
      "description": "The definition of the GraphQL API for selecting rows from a model.",
      "type": "object",
      "required": [
        "queryRootField"
      ],
      "properties": {
        "queryRootField": {
          "description": "The name of the query root field for this API.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        }
      }
    },
    "CommandV1": {
      "title": "CommandV1",
      "type": "object",
      "required": [
        "name",
        "outputType"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/CommandName"
        },
        "outputType": {
          "description": "The type of the objects which is returned as the output.",
          "allOf": [
            {
              "$ref": "#/definitions/TypeReference"
            }
          ]
        },
        "arguments": {
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/ArgumentDefinition"
          }
        },
        "source": {
          "anyOf": [
            {
              "$ref": "#/definitions/CommandSource"
            },
            {
              "type": "null"
            }
          ]
        },
        "graphql": {
          "anyOf": [
            {
              "$ref": "#/definitions/CommandGraphQlDefinition"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "CommandName": {
      "description": "The name of a command.",
      "type": "string"
    },
    "CommandSource": {
      "title": "CommandSource",
      "description": "Description of how a command maps to a particular data connector",
      "type": "object",
      "required": [
        "dataConnectorCommand",
        "dataConnectorName"
      ],
      "properties": {
        "dataConnectorName": {
          "description": "The name of the data connector backing this command.",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorName"
            }
          ]
        },
        "dataConnectorCommand": {
          "description": "The function/procedure in the data connector that backs this command.",
          "allOf": [
            {
              "$ref": "#/definitions/DataConnectorCommand"
            }
          ]
        },
        "typeMapping": {
          "description": "How the various types used in this command correspond to entities in the data connector.",
          "default": {},
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/TypeMapping"
          }
        },
        "argumentMapping": {
          "description": "Mapping from command argument names to data connector table argument names.",
          "default": {},
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DataConnectorCommand": {
      "oneOf": [
        {
          "title": "Function",
          "type": "object",
          "required": [
            "function"
          ],
          "properties": {
            "function": {
              "type": "string"
            }
          },
          "additionalProperties": false
        },
        {
          "title": "Procedure",
          "type": "object",
          "required": [
            "procedure"
          ],
          "properties": {
            "procedure": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "CommandGraphQlDefinition": {
      "title": "CommandGraphQlDefinition",
      "description": "The definition of the GraphQL API component specific to a command.",
      "type": "object",
      "required": [
        "rootFieldKind",
        "rootFieldName"
      ],
      "properties": {
        "rootFieldName": {
          "description": "The name of the graphql root field to use for this command.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlFieldName"
            }
          ]
        },
        "rootFieldKind": {
          "description": "Whether to put this command in the Query or Mutation root of the GraphQL API.",
          "allOf": [
            {
              "$ref": "#/definitions/GraphQlRootFieldKind"
            }
          ]
        }
      }
    },
    "GraphQlRootFieldKind": {
      "type": "string",
      "enum": [
        "Query",
        "Mutation"
      ]
    },
    "RelationshipV1": {
      "title": "RelationshipV1",
      "type": "object",
      "required": [
        "mapping",
        "name",
        "source",
        "target"
      ],
      "properties": {
        "name": {
          "$ref": "#/definitions/RelationshipName"
        },
        "source": {
          "$ref": "#/definitions/CustomTypeName"
        },
        "target": {
          "$ref": "#/definitions/RelationshipTarget"
        },
        "mapping": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/RelationshipMapping"
          }
        }
      }
    },
    "RelationshipName": {
      "description": "The name of the GraphQL relationship field.",
      "type": "string"
    },
    "RelationshipTarget": {
      "oneOf": [
        {
          "title": "ModelRelationshipTarget",
          "type": "object",
          "required": [
            "model"
          ],
          "properties": {
            "model": {
              "type": "object",
              "required": [
                "name",
                "relationshipType"
              ],
              "properties": {
                "name": {
                  "$ref": "#/definitions/ModelName"
                },
                "relationshipType": {
                  "$ref": "#/definitions/RelationshipType"
                }
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "RelationshipType": {
      "title": "RelationshipType",
      "description": "Type of the relationship.",
      "oneOf": [
        {
          "description": "Select one related object from the target.",
          "type": "string",
          "enum": [
            "Object"
          ]
        },
        {
          "description": "Select multiple related objects from the target.",
          "type": "string",
          "enum": [
            "Array"
          ]
        }
      ]
    },
    "RelationshipMapping": {
      "title": "RelationshipMapping",
      "type": "object",
      "required": [
        "source",
        "target"
      ],
      "properties": {
        "source": {
          "$ref": "#/definitions/RelationshipMappingSource"
        },
        "target": {
          "$ref": "#/definitions/RelationshipMappingTarget"
        }
      }
    },
    "RelationshipMappingSource": {
      "title": "RelationshipMappingSource",
      "oneOf": [
        {
          "title": "SourceValue",
          "type": "object",
          "required": [
            "value"
          ],
          "properties": {
            "value": {
              "$ref": "#/definitions/ValueExpression"
            }
          },
          "additionalProperties": false
        },
        {
          "title": "SourceField",
          "type": "object",
          "required": [
            "fieldPath"
          ],
          "properties": {
            "fieldPath": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FieldAccess"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "ValueExpression": {
      "oneOf": [
        {
          "title": "Literal",
          "type": "object",
          "required": [
            "literal"
          ],
          "properties": {
            "literal": true
          },
          "additionalProperties": false
        },
        {
          "title": "SessionVariable",
          "type": "object",
          "required": [
            "sessionVariable"
          ],
          "properties": {
            "sessionVariable": {
              "$ref": "#/definitions/OpenDdsSessionVariable"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "OpenDdsSessionVariable": {
      "description": "Used to represent the name of a session variable, like \"x-hasura-role\".",
      "type": "string"
    },
    "FieldAccess": {
      "title": "RelationshipSourceFieldAccess",
      "type": "object",
      "required": [
        "fieldName"
      ],
      "properties": {
        "fieldName": {
          "$ref": "#/definitions/FieldName"
        }
      }
    },
    "RelationshipMappingTarget": {
      "title": "RelationshipMappingTarget",
      "oneOf": [
        {
          "title": "TargetArgument",
          "type": "object",
          "required": [
            "argument"
          ],
          "properties": {
            "argument": {
              "$ref": "#/definitions/ArgumentName"
            }
          },
          "additionalProperties": false
        },
        {
          "title": "TargetModelField",
          "type": "object",
          "required": [
            "modelField"
          ],
          "properties": {
            "modelField": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/FieldAccess"
              }
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "TypePermissionsV1": {
      "title": "TypePermissionsV1",
      "type": "object",
      "required": [
        "permissions",
        "typeName"
      ],
      "properties": {
        "typeName": {
          "$ref": "#/definitions/CustomTypeName"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TypePermission"
          }
        }
      }
    },
    "TypePermission": {
      "title": "TypePermission",
      "type": "object",
      "required": [
        "role"
      ],
      "properties": {
        "role": {
          "$ref": "#/definitions/Role"
        },
        "output": {
          "anyOf": [
            {
              "$ref": "#/definitions/TypeOutputPermission"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "TypeOutputPermission": {
      "title": "TypeOutputPermission",
      "description": "One unit of output permission",
      "type": "object",
      "required": [
        "allowedFields"
      ],
      "properties": {
        "allowedFields": {
          "description": "Fields of the type that are accessible for a role",
          "type": "array",
          "items": {
            "$ref": "#/definitions/FieldName"
          }
        }
      }
    },
    "ModelPermissionsV1": {
      "title": "ModelPermissionsV1",
      "type": "object",
      "required": [
        "modelName",
        "permissions"
      ],
      "properties": {
        "modelName": {
          "$ref": "#/definitions/ModelName"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ModelPermission"
          }
        }
      }
    },
    "ModelPermission": {
      "title": "ModelPermission",
      "type": "object",
      "required": [
        "role"
      ],
      "properties": {
        "role": {
          "$ref": "#/definitions/Role"
        },
        "select": {
          "anyOf": [
            {
              "$ref": "#/definitions/SelectPermission"
            },
            {
              "type": "null"
            }
          ]
        }
      }
    },
    "SelectPermission": {
      "title": "SelectPermission",
      "type": "object",
      "required": [
        "filter"
      ],
      "properties": {
        "filter": {
          "description": "Filter expression when selecting rows for this model. Null filter implies all rows are selectable.",
          "allOf": [
            {
              "$ref": "#/definitions/NullableModelPredicate"
            }
          ]
        }
      }
    },
    "NullableModelPredicate": {
      "anyOf": [
        {
          "type": "null"
        },
        {
          "$ref": "#/definitions/ModelPredicate"
        }
      ]
    },
    "ModelPredicate": {
      "oneOf": [
        {
          "title": "FieldComparison",
          "type": "object",
          "required": [
            "fieldComparison"
          ],
          "properties": {
            "fieldComparison": {
              "type": "object",
              "required": [
                "field",
                "operator"
              ],
              "properties": {
                "field": {
                  "$ref": "#/definitions/FieldName"
                },
                "operator": {
                  "$ref": "#/definitions/OperatorName"
                },
                "value": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/ValueExpression"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "title": "Relationship",
          "type": "object",
          "required": [
            "relationship"
          ],
          "properties": {
            "relationship": {
              "type": "object",
              "required": [
                "name"
              ],
              "properties": {
                "name": {
                  "$ref": "#/definitions/RelationshipName"
                },
                "predicate": {
                  "anyOf": [
                    {
                      "$ref": "#/definitions/ModelPredicate"
                    },
                    {
                      "type": "null"
                    }
                  ]
                }
              }
            }
          },
          "additionalProperties": false
        },
        {
          "title": "And",
          "type": "object",
          "required": [
            "and"
          ],
          "properties": {
            "and": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModelPredicate"
              }
            }
          },
          "additionalProperties": false
        },
        {
          "title": "Or",
          "type": "object",
          "required": [
            "or"
          ],
          "properties": {
            "or": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ModelPredicate"
              }
            }
          },
          "additionalProperties": false
        },
        {
          "title": "Not",
          "type": "object",
          "required": [
            "not"
          ],
          "properties": {
            "not": {
              "$ref": "#/definitions/ModelPredicate"
            }
          },
          "additionalProperties": false
        }
      ]
    },
    "CommandPermissionsV1": {
      "title": "CommandPermissionsV1",
      "type": "object",
      "required": [
        "commandName",
        "permissions"
      ],
      "properties": {
        "commandName": {
          "$ref": "#/definitions/CommandName"
        },
        "permissions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/CommandPermission"
          }
        }
      }
    },
    "CommandPermission": {
      "title": "CommandPermission",
      "type": "object",
      "required": [
        "allowExecution",
        "role"
      ],
      "properties": {
        "role": {
          "$ref": "#/definitions/Role"
        },
        "allowExecution": {
          "type": "boolean"
        }
      }
    }
  }
}
